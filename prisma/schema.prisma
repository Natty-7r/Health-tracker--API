generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Doctor {
  id         String   @id @default(uuid()) // UUID type for user_id
  first_name String // Required first name
  last_name  String // Required last name
  email      String   @unique // Optional email
  password   String // Required password
  created_at DateTime @default(now())
  isVerified  Boolean  @default(false)
  otp        Otp[]
  users      User[] // Relation to users

}

model User {
  id            String     @id @default(uuid()) // UUID type for user_id
  first_name    String // Required first name
  last_name     String // Required last name
  controller_id String     @unique
  created_at    DateTime   @default(now())
  doctor_id     String? // Optional field to store reference to doctor
  doctor        Doctor?    @relation(fields: [doctor_id], references: [id])
  user_data     UserData[] @relation("UserDataBYController")
}

model UserData {
  id               String   @id @default(uuid())
  body_temperature Float // Body temperature field
  heart_rate       Int // Heart rate field
  accelerometer_x  Float // Accelerometer X-axis result
  accelerometer_y  Float // Accelerometer Y-axis result
  accelerometer_z  Float // Accelerometer Z-axis result
  recorded_at      DateTime @default(now()) // Timestamp of the recorded data
  controller_id    String
  user             User     @relation("UserDataBYController", fields: [controller_id], references: [controller_id])
}

model Otp {
  id          String   @id @default(uuid()) // UUID type for user_id
  doctor_id   String   @unique
  otp         String // Required otp
  otp_expires DateTime // Required expires
  created_at  DateTime @default(now())
  isVerified  Boolean  @default(false)
  doctor      Doctor   @relation(fields: [doctor_id], references: [id])
}
